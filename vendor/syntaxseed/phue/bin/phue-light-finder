#!/usr/bin/env php
<?php

if (is_file(__DIR__ . '/../vendor/autoload.php')) {
    require_once __DIR__ . '/../vendor/autoload.php';
} else {
    require_once __DIR__ . '/../../../autoload.php';
}

// Show usage if host and username not passed
if (!isset($argv[1], $argv[2])) {
    echo "Philips Hue Light Finder", "\n\n",
         "Usage:", "\n",
         "  <host> <username>", "\n\n";
    exit(1);
}

// Initialize client
$client = new \Phue\Client($argv[1], $argv[2]);

echo "Testing connection to bridge at {$client->getHost()}", "\n";

try {
    $client->sendCommand(
        new \Phue\Command\Ping
    );
} catch (\Phue\Transport\Exception\ConnectionException $e) {
    echo "Issue connecting to bridge", "\n";

    exit(1);
}

// Quit if user is not authenticated
if (!$client->sendCommand(new \Phue\Command\IsAuthorized)) {
    echo "{$client->getUsername()} is not authenticated with the bridge. Aborting.", "\n\n";

    exit(1);
}

// Start light scan,
$client->sendCommand(
    new \Phue\Command\StartLightScan
);

echo "Scanning for lights. Turn at least one light off, then on...", "\n";

// Found lights
// TODO $lights = [];
 
$lights = array();

do {
   $response = $client->sendCommand(
       new \Phue\Command\GetNewLights
   );

   // Don't continue if the scan isn't active
   if (!$response->isScanActive()) {
       break;
   }

   // Iterate through each found light
   foreach ($response->getLights() as $lightId => $lightName) {
       // Light already found in poll
       if (isset($lights[$lightId])) {
           continue;
       }

       $lights[$lightId] = $lightName;

       echo "Found: Light #{$lightId}, {$lightName}", "\n";
   }
} while(true);

echo "Done scanning", "\n\n";
